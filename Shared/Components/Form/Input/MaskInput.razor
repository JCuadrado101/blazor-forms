@using System.Linq.Expressions
@inject IJSRuntime JSRuntime;
@inherits InputBase<string>

<InputContainer FieldLabelText="@Label">
    <input
        id="@guid"
        class="input-style input-number @CssClass"
        @bind="@CurrentValue"
        style="border-radius: 3px;"
        type="@InputType"
        maxlength="@MaxNumber"
        @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString!)"
        disabled="@IsDisabled"
    />
        @if(IsPrivate != null)
        {
            <VisibleEyeButton ShowPassword="@changeTextVisibility" EyeVisible="@EyeIcon"/>

        }        <div class="form-control-validation">
            <CustomValidationMessage For="@ValidationFor"/>
        </div>
</InputContainer>

@code {
    Guid guid { get; set; }

    [Parameter, EditorRequired] public Expression<Func<string>> ValidationFor { get; set; } = default!;
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool? IsPrivate { get; set; }
    [Parameter] public int? MaxNumber { get; set; }
    [Parameter] public bool? IsDisabled { get; set; }

    private string? InputType { get; set; }
    private string? EyeIcon { get; set; } = "fa-eye";
    protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage)
    {
        result = value!;
        validationErrorMessage = null!;
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await JSRuntime.InvokeVoidAsync("mask",guid.ToString(), AdditionalAttributes!["data-mask"].ToString());
        }
    }

    private void changeTextVisibility()
    {
        if(InputType == "password")
        {
            InputType = "text";
            EyeIcon = "fa-eye-slash";
        }
        else
        {
            InputType = "password";
            EyeIcon = "fa-eye";
        }
    }

    protected override void OnInitialized()
    {
        guid = Guid.NewGuid();

        if(IsPrivate == null)
        {
            InputType = "text";
        }
        else
        {
            InputType = "password";
        }
    }
}

